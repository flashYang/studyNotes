新建一个文件目录
鼠标右键 git Branch
clone git://...../.git rrest
新建  README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/superquestion/studyNotes.git
git push -u origin master

生成公钥：
https://help.github.com/articles/generating-ssh-keys

创建分支 并切换到分支上
git checkout -b feature_x

删除 分支
git branch -d feature_x

合并
1.先切换到要合并的分支
2.git merge xx



快捷设置
C:\Users\Administrator  .gitconfig
[alias]
    ci = commit -s
    lg = log --graph --pretty=format:'%Cred%h%Creset -%d%C(white) %s %C(yellow)(%cr) %C(white)%an' --abbrev-commit --date=relative -10
    br = branch
    st = status
    co = checkout
    go = "! bash -c \" git pull origin && git add . && git status && if [ \\\"$*\\\" == \\\"\\\" ]; then git commit -a; else git commit -am \\\"$*\\\"; fi && git push origin HEAD;\"" 
    release = "! bash -c \" if [ \\\"$1\\\" == \\\"\\\" -o \\\"$2\\\" == \\\"\\\" ]; then echo \\\"git release <branch> <version> [<message>]\\\"; exit; fi;  git.exe pull -v --progress "origin"; git add .; git status; if [ \\\"$3\\\" == \\\"\\\" ]; then git commit -a; else git commit -am \\\"$3\\\"; fi; git checkout $1; git merge develop; git push --all; git tag -m \\\"$3\\\" $2 && git push --tags; git checkout develop; \"" 


1.在项目根目录下建立 .gitignore 文件
2.   .gitignore文件过滤有两种模式，开放模式和保守模式
2.1开放模式负责设置过滤哪些文件和文件夹
eg：
过滤文件夹设置：
/mtk/       表示过滤这个文件夹
过滤文件设置
指定过滤某种类型的文件：
*.zip
*.rar
*.via
*.tmp
*.err
指定过滤某个文件：
/mtk/do.c
/mtk/if.h



$ git config --global user.name "xx"

$ git config --global user.email "xx@xx.com"
执行了上面的命令后,会在你的主目录(home directory)建立一个叫 ~/.gitconfig 的文件. 内容一般像下面这样:

[user]
        name = xx
        email = xx@xx.com

修改文件，将更新的内容添加到索引

git add file1 file2 
 
git add * //所有

git diff 加上--cached参数。看到哪些文件将被提交

git diff --cached

(如果没有--cached参数，git diff 会显示当前你所有已做的但没有加入到索引里的修改.) 
你也可以用git status命令来获得当前项

git diff 和 git diff --cached的区别

git diff 找到你当前工作目录中，没有添加到索引中的，没有执行git add的，下次commit不会
被提交的。

git diff --cached 如果

git commit 提交到本地版本库

git commit -m "注释"


git add 命令 可以用git commit -a 代替

git rm test.txt 删除test.txt文件

创建一个叫做 feature_x 的分支，并切换到该分支
git checkout -b feature_x 

删除分支
git branch -d feature_x

切换到分支：
git checkout xx

合并其他分支到当前分支
git merge xx(分知名) ---> git branch 获得所有的分支名

如果两个分支出现冲突

git diff (查看冲突)

修改后  git commit -a


撤销合并
git reset --hard HEAD

合并后并提交的代码 ，撤销

git reset --hard ORIG_HEAD


替换本地的改动

git checkout -- fileName

此命令会使用Head中的最新内容替换掉你工作目录中的文件。已经添加到
缓存区的改动，以及新文件，都不会受到影响


git rebase origin

去掉你分支中每个commit ,保存在.git/rebase中，然后把你的分支跟新到最新的origin分支


在rebase的过程中，也许会出现冲突(conflict). 在这种情况，Git会停止rebase并会让你去解决 冲突；在解决完冲突后，用"git-add"命令去更新这些内容的索引(index), 然后，你无需执行 git-commit,只要执行:

$ git rebase --continue
这样git会继续应用(apply)余下的补丁。

在任何时候，你可以用--abort参数来终止rebase的行动，并且"mywork" 分支会回到rebase开始前的状态。

$ git rebase --abort
终止

git grep 


git 的棵树
    工作目录
     
    缓存区   缓存区，临时保存你的改动

    head    最后一次提交的结果

git pull  ------> 更新代码到最新

git status -----> 可以看到你工作分支上的最新修改

git add file -----> 添加你即要将提交的

git rm -r --cached .  撤销前一次所有添加到本地的缓存

git add .  当前目录的所有

git commit -m "xxx"   把代码添加到缓存区去

git add * 添加所有

git add '*.txt'   添加所有txt 文件

git log   ----> commit 记录


git remote -v   显示对应的克隆地址

git remote add 要添加一个新的远程仓库 如：git remote add origin https://github.com/try-git/try_git.git



$ git fetch [remote-name] 把远程更新数据拉到本地，但是不会合并


 git push -u origin master 把代码提交到仓库的主分支上

 git pull origin master   从主分支上把最新数据跟新下来(本地没有的)并合并

git diff HEAD 和最后一次提交的分歧

git diff –cached                    查看已经暂存起来的文件和上次提交的版本之间的差异

git checkout -- <file>：撤销工作目录中对 <file> 文件的修改

git pull --a  killed by singal

git pull --all  提交所有
